{"version":3,"sources":["js\\element-internals-polyfill.js"],"names":["refMap","WeakMap","validityMap","hiddenInputMap","internalsMap","validationMessageMap","formsMap","shadowHostsMap","formElementsMap","refValueMap","upgradeMap","shadowRootMap","validationAnchorMap","documentFragmentMap","onSubmitMap","observerConfig$1","attributes","attributeFilter","observer","MutationObserver","mutationsList","mutation","target","constructor","isDisabled","hasAttribute","toggleAttribute","formDisabledCallback","apply","removeHiddenInputs","internals","get","forEach","hiddenInput","remove","set","createHiddenInput","ref","input","document","createElement","type","name","getAttribute","after","push","initLabels","labels","length","Array","from","label","addEventListener","focus","bind","firstLabelId","id","htmlFor","setAttribute","setFormValidity","form","hasInvalid","elements","map","element","validity","valid","filter","control","isConnected","includes","formInputCallback","event","findParentForm","formChangeCallback","formSubmitCallback","noValidate","size","reverse","node","reportValidity","stopImmediatePropagation","stopPropagation","preventDefault","call","formResetCallback","formAssociated","initForm","onsubmit","formElements","add","initSet","Set","formAssociatedCallback","setTimeout","elem","parent","parentNode","tagName","throwIfNotFormAssociated","message","ErrorType","DOMException","overrideFormMethod","returnValue","method","upgradeInternals","aom","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","ValidityState","this","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","Object","seal","isValid","validityState","key","observerCallback","mutationList","mutationRecord","addedNodes","removedNodes","added","removed","has","keys","delete","disconnect","fragmentObserverCallback","observerConfig","childList","subtree","customStateMap","CustomStateSet","super","indexOf","TypeError","state","exec","result","clear","entry","entries","ElementInternals","rootNode","getRootNode","states","closureValue","attributeName","defineProperty","value","initAom","observe","initRef","DocumentFragment","fragment","deferUpgrade","isPolyfilled","checkValidity","validityEvent","Event","bubbles","cancelable","composed","dispatchEvent","hostRoot","querySelectorAll","anchor","setFormValue","FormData","formDataValue","formDataKey","setValidity","validityChanges","validationMessage","validityChangesObj","validityObject","check","newState","reconcileValidity","shadowRoot","willValidate","disabled","window","ElementInternalsFeatureDetection","HTMLElement","attachInternals","randomName","Math","random","toString","replace","customElements","define","featureDetectionElement","every","prop","isElementInternalsSupported","attachShadowObserver","args","attachShadow","checkValidityOverride","reportValidityOverride","prototype","Error","Element","documentElement","HTMLFormElement"],"mappings":"CAAC,WACG,aAEA,MAAMA,EAAS,IAAIC,QACbC,EAAc,IAAID,QAClBE,EAAiB,IAAIF,QACrBG,EAAe,IAAIH,QACnBI,EAAuB,IAAIJ,QAC3BK,EAAW,IAAIL,QACfM,EAAiB,IAAIN,QACrBO,EAAkB,IAAIP,QACtBQ,EAAc,IAAIR,QAClBS,EAAa,IAAIT,QACjBU,EAAgB,IAAIV,QACpBW,EAAsB,IAAIX,QAC1BY,EAAsB,IAAIZ,QAC1Ba,EAAc,IAAIb,QAElBc,EAAmB,CAAEC,YAAY,EAAMC,gBAAiB,CAAC,aACzDC,EAAW,IAAIC,kBAAkBC,IACnC,IAAK,MAAMC,KAAYD,EAAe,CAClC,MAAME,EAASD,EAASC,OACxB,GAAIA,EAAOC,YAA4B,eAAG,CACtC,MAAMC,EAAaF,EAAOG,aAAa,YACvCH,EAAOI,gBAAgB,qBAAsBF,GACzCF,EAAOK,sBACPL,EAAOK,qBAAqBC,MAAMN,EAAQ,CAACA,EAAOG,aAAa,mBAKzEI,EAAsBC,IACH3B,EAAe4B,IAAID,GAC3BE,SAAQC,IACjBA,EAAYC,YAEhB/B,EAAegC,IAAIL,EAAW,KAE5BM,EAAoB,CAACC,EAAKP,KAC5B,MAAMQ,EAAQC,SAASC,cAAc,SAKrC,OAJAF,EAAMG,KAAO,SACbH,EAAMI,KAAOL,EAAIM,aAAa,QAC9BN,EAAIO,MAAMN,GACVnC,EAAe4B,IAAID,GAAWe,KAAKP,GAC5BA,GAQLQ,EAAa,CAACT,EAAKU,KACrB,GAAIA,EAAOC,OAAQ,CACfC,MAAMC,KAAKH,GAAQf,SAAQmB,GAASA,EAAMC,iBAAiB,QAASf,EAAIgB,MAAMC,KAAKjB,MACnF,IAAIkB,EAAeR,EAAO,GAAGS,GACxBT,EAAO,GAAGS,KACXD,EAAe,GAAGR,EAAO,GAAGU,gBAC5BV,EAAO,GAAGS,GAAKD,GAEnBlB,EAAIqB,aAAa,kBAAmBH,KAGtCI,EAAmBC,IACrB,MAKMC,EAAa,IALWZ,MAAMC,KAAKU,EAAKE,UACzCC,KAAKC,GAAYA,EAAQC,SAASC,WACbjB,MAAMC,KAAK1C,EAAgBuB,IAAI6B,IACpDO,QAAOC,GAAWA,EAAQC,cAC1BN,KAAKK,GAAYhE,EAAa2B,IAAIqC,GAASH,SAASC,SACWI,UAAS,GAC7EV,EAAKlC,gBAAgB,oBAAqBmC,GAC1CD,EAAKlC,gBAAgB,mBAAoBmC,IAEvCU,EAAqBC,IACvBb,EAAgBc,EAAeD,EAAMlD,UAEnCoD,EAAsBF,IACxBb,EAAgBc,EAAeD,EAAMlD,UAEnCqD,EAAsBH,IACxB,MAAMZ,EAAOY,EAAMlD,OACbwC,EAAWtD,EAAgBuB,IAAI6B,GACrC,IAAIA,EAAKgB,YAGLd,EAASe,KAAM,CAQf,GAPc5B,MAAMC,KAAKY,GAEpBgB,UACAf,KAAIgB,GACa3E,EAAa2B,IAAIgD,GAClBC,mBAEJV,UAAS,GACtBE,EAAMS,2BACNT,EAAMU,kBACNV,EAAMW,sBAEL,GAAIrE,EAAYiB,IAAI6B,GAAO,EAGX,IAFA9C,EAAYiB,IAAI6B,GACPwB,KAAKxB,EAAMY,IAEjCA,EAAMW,oBAKhBE,EAAqBb,IACvB,MAAMV,EAAWtD,EAAgBuB,IAAIyC,EAAMlD,QACvCwC,GAAYA,EAASe,MACrBf,EAAS9B,SAAQgC,IACTA,EAAQzC,YAAY+D,gBAAkBtB,EAAQqB,mBAC9CrB,EAAQqB,kBAAkBzD,MAAMoC,OAK1CuB,EAAW,CAAClD,EAAKuB,EAAM9B,KACzB,GAAI8B,EAAM,CACFA,EAAK4B,WACL1E,EAAYqB,IAAIyB,EAAMA,EAAK4B,SAASlC,KAAKM,IACzCA,EAAK4B,SAAW,MAEpB,MAAMC,EAAejF,EAAgBuB,IAAI6B,GACzC,GAAI6B,EACAA,EAAaC,IAAIrD,OAEhB,CACD,MAAMsD,EAAU,IAAIC,IACpBD,EAAQD,IAAIrD,GACZ7B,EAAgB2B,IAAIyB,EAAM+B,GAC1B/B,EAAKR,iBAAiB,SAAUuB,GAChCf,EAAKR,iBAAiB,QAASiC,GAC/BzB,EAAKR,iBAAiB,QAASmB,GAC/BX,EAAKR,iBAAiB,SAAUsB,GAEpCpE,EAAS6B,IAAIyB,EAAM,CAAEvB,IAAAA,EAAKP,UAAAA,IACtBO,EAAId,YAA4B,gBAAKc,EAAIwD,wBACzCC,YAAW,KACPzD,EAAIwD,uBAAuBjE,MAAMS,EAAK,CAACuB,MACxC,GAEPD,EAAgBC,KAGlBa,EAAkBsB,IACpB,IAAIC,EAASD,EAAKE,WAIlB,OAHID,GAA6B,SAAnBA,EAAOE,UACjBF,EAASvB,EAAeuB,IAErBA,GAELG,EAA2B,CAAC9D,EAAK+D,EAASC,EAAYC,gBACxD,IAAKjE,EAAId,YAA4B,eACjC,MAAM,IAAI8E,EAAUD,IAGtBG,EAAqB,CAAC3C,EAAM4C,EAAaC,KAC3C,MAAM3C,EAAWtD,EAAgBuB,IAAI6B,GAUrC,OATIE,GAAYA,EAASe,MACrBf,EAAS9B,SAAQgC,IACK5D,EAAa2B,IAAIiC,GACXyC,OAEpBD,GAAc,MAInBA,GAELE,EAAoBrE,IACtB,GAAIA,EAAId,YAA4B,eAAG,CACnC,MAAMO,EAAY1B,EAAa2B,IAAIM,IAC7BU,OAAEA,EAAMa,KAAEA,GAAS9B,EACzBgB,EAAWT,EAAKU,GAChBwC,EAASlD,EAAKuB,EAAM9B,KAItB6E,EAAM,CACRC,WAAY,cACZC,iBAAkB,oBAClBC,SAAU,YACVC,YAAa,eACbC,aAAc,gBACdC,aAAc,gBACdC,YAAa,eACbC,YAAa,eACbC,aAAc,gBACdC,aAAc,gBACdC,aAAc,gBACdC,WAAY,cACZC,iBAAkB,oBAClBC,UAAW,aACXC,UAAW,aACXC,SAAU,YACVC,UAAW,aACXC,cAAe,iBACfC,oBAAqB,uBACrBC,gBAAiB,mBACjBC,gBAAiB,mBACjBC,aAAc,gBACdC,YAAa,eACbC,aAAc,gBACdC,aAAc,gBACdC,aAAc,gBACdC,oBAAqB,uBACrBC,aAAc,gBACdC,aAAc,gBACdC,YAAa,eACbC,aAAc,gBACdC,YAAa,eACbC,SAAU,YACVC,aAAc,gBACdC,aAAc,gBACdC,aAAc,gBACdC,cAAe,iBACfC,KAAM,QAwBV,MAAMC,EACF3H,cACI4H,KAAKC,UAAW,EAChBD,KAAKE,aAAc,EACnBF,KAAKG,iBAAkB,EACvBH,KAAKI,eAAgB,EACrBJ,KAAKK,gBAAiB,EACtBL,KAAKM,cAAe,EACpBN,KAAKO,SAAU,EACfP,KAAKQ,UAAW,EAChBR,KAAKS,cAAe,EACpBT,KAAKjF,OAAQ,EACbiF,KAAKU,cAAe,EACpBC,OAAOC,KAAKZ,OAGpB,MAmBMa,EAAWC,IACb,IAAI/F,GAAQ,EACZ,IAAK,IAAIgG,KAAOD,EACA,UAARC,IAA0C,IAAvBD,EAAcC,KACjChG,GAAQ,GAGhB,OAAOA,GAGX,SAASiG,EAAiBC,GACtBA,EAAapI,SAAQqI,IACjB,MAAMC,WAAEA,EAAUC,aAAEA,GAAiBF,EAC/BG,EAAQvH,MAAMC,KAAKoH,GACnBG,EAAUxH,MAAMC,KAAKqH,GAC3BC,EAAMxI,SAAQ+C,IACV,GAAI3E,EAAasK,IAAI3F,IAASA,EAAKxD,YAA4B,eAAG,CAC9D,MAAMO,EAAY1B,EAAa2B,IAAIgD,IAC7BnB,KAAEA,GAAS9B,EACjByD,EAASR,EAAMnB,EAAM9B,GACrBgB,EAAWiC,EAAMjD,EAAUiB,QAE/B,GAAIrC,EAAWgK,IAAI3F,GAAO,CACtB,MAAMjD,EAAYpB,EAAWqB,IAAIgD,GACjB+E,OAAOa,KAAKhE,GAEvBxC,QAAO+F,GAA0B,OAAnBpI,EAAUoI,KACxBlI,SAAQkI,IACTnF,EAAKrB,aAAaiD,EAAIuD,GAAMpI,EAAUoI,OAE1CxJ,EAAWkK,OAAO7F,OAG1B0F,EAAQzI,SAAQ+C,IACZ,MAAMjD,EAAY1B,EAAa2B,IAAIgD,GAInC,GAHIjD,GAAa3B,EAAe4B,IAAID,IAChCD,EAAmBC,GAEnBvB,EAAemK,IAAI3F,GAAO,CACTxE,EAAewB,IAAIgD,GAC3B8F,oBAKzB,SAASC,EAAyBV,GAC9BA,EAAapI,SAAQX,IACjB,MAAMkJ,aAAEA,GAAiBlJ,EACzBkJ,EAAavI,SAAQ+C,IACjB,MAAM7D,EAAWL,EAAoBkB,IAAIV,EAASC,QAC9ClB,EAAasK,IAAI3F,IACjB2B,EAAiB3B,GAErB7D,EAAS2J,mBASrB,IAAI1J,iBAAiBgJ,GACrB,MAAMY,EAAiB,CACnBC,WAAW,EACXC,SAAS,GAGPC,EAAiB,IAAIjL,QAC3B,MAAMkL,UAAuBvF,IACzBrE,YAAYc,GAER,GADA+I,SACK/I,IAAQA,EAAI6D,UAAyC,IAA9B7D,EAAI6D,QAAQmF,QAAQ,KAC5C,MAAM,IAAIC,UAAU,uBAExBJ,EAAe/I,IAAIgH,KAAM9G,GAE7BqD,IAAI6F,GACA,IAAK,MAAMC,KAAKD,IAA2B,iBAAVA,EAC7B,MAAM,IAAIjF,aAAa,oEAAoEiF,2BAE/F,MAAME,EAASL,MAAM1F,IAAI6F,GAGzB,OAFYL,EAAenJ,IAAIoH,MAC3BzH,gBAAgB,QAAQ6J,KAAS,GAC9BE,EAEXC,QACI,IAAK,IAAKC,KAAUxC,KAAKyC,UACrBzC,KAAKyB,OAAOe,GAEhBP,MAAMM,QAEVd,OAAOW,GACH,MAAME,EAASL,MAAMR,OAAOW,GAG5B,OAFYL,EAAenJ,IAAIoH,MAC3BzH,gBAAgB,QAAQ6J,KAAS,GAC9BE,GAIf,MAAMI,EACFtK,YAAYc,GACR,IAAKA,IAAQA,EAAI6D,UAAyC,IAA9B7D,EAAI6D,QAAQmF,QAAQ,KAC5C,MAAM,IAAIC,UAAU,uBAExB,MAAMQ,EAAWzJ,EAAI0J,cACf9H,EAAW,IAAIiF,EACrBC,KAAK6C,OAAS,IAAIb,EAAe9I,GACjCrC,EAAOmC,IAAIgH,KAAM9G,GACjBnC,EAAYiC,IAAIgH,KAAMlF,GACtB7D,EAAa+B,IAAIE,EAAK8G,MAvKd,EAAC9G,EAAKP,KAClB,IAAK,IAAIoI,KAAOvD,EAAK,CACjB7E,EAAUoI,GAAO,KACjB,IAAI+B,EAAe,KACnB,MAAMC,EAAgBvF,EAAIuD,GAC1BJ,OAAOqC,eAAerK,EAAWoI,EAAK,CAClCnI,IAAG,IACQkK,EAEX9J,IAAIiK,GACAH,EAAeG,EACX/J,EAAIgC,YACJhC,EAAIqB,aAAawI,EAAeE,GAGhC1L,EAAWyB,IAAIE,EAAKP,QAyJhCuK,CAAQhK,EAAK8G,MArVL,EAAC9G,EAAKP,KAClB3B,EAAegC,IAAIL,EAAW,IAC9B,MAAMN,EAAaa,EAAIZ,aAAa,YACpCY,EAAIX,gBAAgB,qBAAsBF,GAC1CN,EAASoL,QAAQjK,EAAKtB,IAkVlBwL,CAAQlK,EAAK8G,MACbW,OAAOC,KAAKZ,MACZzC,EAAiBrE,GACbyJ,aAAoBU,kBA1DX,CAACC,IAClB,MAAMvL,EAAW,IAAIC,iBAAiB2J,GACtC5J,EAASoL,QAAQG,EAAU,CAAEzB,WAAW,IACxCnK,EAAoBsB,IAAIsK,EAAUvL,IAwD1BwL,CAAaZ,GAGVa,0BACP,OAAO,EAEXC,gBACI,MAAMvK,EAAMrC,EAAO+B,IAAIoH,MACvBhD,EAAyB9D,EAAK,wHAC9B,MAAM4B,EAAW/D,EAAY6B,IAAIoH,MACjC,IAAKlF,EAASC,MAAO,CACjB,MAAM2I,EAAgB,IAAIC,MAAM,UAAW,CACvCC,SAAS,EACTC,YAAY,EACZC,UAAU,IAEd5K,EAAI6K,cAAcL,GAEtB,OAAO5I,EAASC,MAEhBN,WACA,MAAMvB,EAAMrC,EAAO+B,IAAIoH,MAEvB,IAAIvF,EAIJ,OALAuC,EAAyB9D,EAAK,4HAEY,IAAtCA,EAAId,YAA4B,iBAChCqC,EAAOa,EAAepC,IAEnBuB,EAEPb,aACA,MAAMV,EAAMrC,EAAO+B,IAAIoH,MACvBhD,EAAyB9D,EAAK,6HAC9B,MAAMmB,EAAKnB,EAAIM,aAAa,MACtBwK,EAAW9K,EAAI0J,cACrB,OAAIoB,GAAY3J,GACL2J,EAAWA,EAASC,iBAAiB,SAAS5J,OAElD,GAEXwB,iBACI,MAAM3C,EAAMrC,EAAO+B,IAAIoH,MACvBhD,EAAyB9D,EAAK,yHAC9B,MAAM6B,EAAQiF,KAAKyD,gBACbS,EAASzM,EAAoBmB,IAAIoH,MACvC,GAAIkE,IAAWhL,EAAId,YAA4B,eAC3C,MAAM,IAAI+E,aAAa,sHAM3B,OAJKpC,GAASmJ,IACVhL,EAAIgB,QACJgK,EAAOhK,SAEJa,EAEXoJ,aAAalB,GACT,MAAM/J,EAAMrC,EAAO+B,IAAIoH,MAGvB,GAFAhD,EAAyB9D,EAAK,uHAC9BR,EAAmBsH,MACN,MAATiD,GAAmBA,aAAiBmB,SAMtB,MAATnB,GAAiBA,aAAiBmB,UACvCnB,EAAMpK,SAAQ,CAACwL,EAAeC,KAC1B,GAA6B,iBAAlBD,EAA4B,CACnC,MAAMvL,EAAcG,EAAkBC,EAAK8G,MAC3ClH,EAAYS,KAAO+K,EACnBxL,EAAYmK,MAAQoB,WAV5B,GAAInL,EAAIM,aAAa,QAAS,CACNP,EAAkBC,EAAK8G,MAC/BiD,MAAQA,EAY5B3L,EAAY0B,IAAIE,EAAK+J,GAEzBsB,YAAYC,EAAiBC,EAAmBP,GAC5C,MAAMhL,EAAMrC,EAAO+B,IAAIoH,MAEvB,GADAhD,EAAyB9D,EAAK,uHACzBsL,EACD,MAAM,IAAIrC,UAAU,mGAExB1K,EAAoBuB,IAAIgH,KAAMkE,GAC9B,MAAMpJ,EAAW/D,EAAY6B,IAAIoH,MAC3B0E,EAAqB,GAC3B,IAAK,MAAM3D,KAAOyD,EACdE,EAAmB3D,GAAOyD,EAAgBzD,GA3NrC,IAAC4D,EA6NqC,IAA3ChE,OAAOa,KAAKkD,GAAoB7K,UA7N1B8K,EA8NG7J,GA7NFmF,UAAW,EAC1B0E,EAAezE,aAAc,EAC7ByE,EAAexE,iBAAkB,EACjCwE,EAAevE,eAAgB,EAC/BuE,EAAetE,gBAAiB,EAChCsE,EAAerE,cAAe,EAC9BqE,EAAepE,SAAU,EACzBoE,EAAenE,UAAW,EAC1BmE,EAAelE,cAAe,EAC9BkE,EAAe5J,OAAQ,EACvB4J,EAAejE,cAAe,GAqN1B,MAAMkE,EAAQ,IAAK9J,KAAa4J,UACzBE,EAAM7J,MACb,MAAMA,MAAEA,GApNU,EAAC4J,EAAgBE,KACvCF,EAAe5J,MAAQ8F,EAAQgE,GAC/BlE,OAAOa,KAAKqD,GAAUhM,SAAQkI,GAAO4D,EAAe5D,GAAO8D,EAAS9D,KAC7D4D,GAiNeG,CAAkBhK,EAAU8J,GAC9C,IAAK7J,IAAU0J,EACX,MAAM,IAAItH,aAAa,uJAE3BjG,EAAqB8B,IAAIgH,KAAMjF,EAAQ,GAAK0J,GAC5CvL,EAAIX,gBAAgB,qBAAsBwC,GAC1C7B,EAAIX,gBAAgB,kBAAmBwC,GACvC7B,EAAIqB,aAAa,eAAgB,IAAIQ,KAErCgK,iBACA,MAAM7L,EAAMrC,EAAO+B,IAAIoH,MAEvB,OADmBxI,EAAcoB,IAAIM,GAE1B1B,EAAcoB,IAAIM,GAEtB,KAEPuL,wBACA,MAAMvL,EAAMrC,EAAO+B,IAAIoH,MAEvB,OADAhD,EAAyB9D,EAAK,wIACvBhC,EAAqB0B,IAAIoH,MAEhClF,eACA,MAAM5B,EAAMrC,EAAO+B,IAAIoH,MACvBhD,EAAyB9D,EAAK,+HAE9B,OADiBnC,EAAY6B,IAAIoH,MAGjCgF,mBACA,MAAM9L,EAAMrC,EAAO+B,IAAIoH,MAEvB,OADAhD,EAAyB9D,EAAK,oIAC1BA,EAAI+L,WAAY/L,EAAIZ,aAAa,aAoC7C,GA9BK4M,OAAOlD,iBACRkD,OAAOlD,eAAiBA,IAE5B,WACI,IAAKkD,OAAOxC,iBACR,OAAO,EAEX,MAAMyC,UAAyCC,YAC3ChN,cACI6J,QACAjC,KAAKrH,UAAYqH,KAAKqF,mBAG9B,MAAMC,EAAa,uCAAuCC,KAAKC,SAASC,SAAS,IAAIC,QAAQ,WAAY,MACzGC,eAAeC,OAAON,EAAYH,GAClC,MAAMU,EAA0B,IAAIV,EACpC,MAAO,CACH,aACA,OACA,SACA,eACA,WACA,oBACA,SACA,eACA,cACA,gBACA,kBACFW,OAAMC,GAAQA,KAAQF,EAAwBlN,YAE/CqN,GAA+B,CAEhC,SAASC,KAAwBC,GAC7B,MAAMnB,EAAaoB,EAAa1N,MAAMuH,KAAMkG,GACtCnO,EAAW,IAAIC,iBAAiBgJ,GAItC,OAHAxJ,EAAcwB,IAAIgH,KAAM+E,GACxBhN,EAASoL,QAAQ4B,EAAYnD,GAC7BxK,EAAe4B,IAAIgH,KAAMjI,GAClBgN,EAEX,SAASqB,KAAyBF,GAC9B,IAAI7I,EAAcoG,EAAchL,MAAMuH,KAAMkG,GAC5C,OAAO9I,EAAmB4C,KAAM3C,EAAa,iBAEjD,SAASgJ,KAA0BH,GAC/B,IAAI7I,EAAcxB,EAAepD,MAAMuH,KAAMkG,GAC7C,OAAO9I,EAAmB4C,KAAM3C,EAAa,kBAfjD6H,OAAOxC,iBAAmBA,EAiB1B0C,YAAYkB,UAAUjB,gBAAkB,WACpC,IAAmC,IAA/BrF,KAAKjD,QAAQmF,QAAQ,KACrB,MAAM,IAAIqE,MAAM,mHAEpB,GAAItP,EAAasK,IAAIvB,MACjB,MAAM,IAAI7C,aAAa,wIAE3B,OAAO,IAAIuF,EAAiB1C,OAEhC,MAAMmG,EAAeK,QAAQF,UAAUH,aACvCK,QAAQF,UAAUH,aAAeF,EACR,IAAIjO,iBAAiBgJ,GAC7BmC,QAAQ/J,SAASqN,gBAAiB7E,GACnD,MAAM6B,EAAgBiD,gBAAgBJ,UAAU7C,cAChDiD,gBAAgBJ,UAAU7C,cAAgB2C,EAC1C,MAAMvK,EAAiB6K,gBAAgBJ,UAAUzK,eACjD6K,gBAAgBJ,UAAUzK,eAAiBwK,GAxkBnD","sourcesContent":["(function () {\n    'use strict';\n\n    const refMap = new WeakMap();\n    const validityMap = new WeakMap();\n    const hiddenInputMap = new WeakMap();\n    const internalsMap = new WeakMap();\n    const validationMessageMap = new WeakMap();\n    const formsMap = new WeakMap();\n    const shadowHostsMap = new WeakMap();\n    const formElementsMap = new WeakMap();\n    const refValueMap = new WeakMap();\n    const upgradeMap = new WeakMap();\n    const shadowRootMap = new WeakMap();\n    const validationAnchorMap = new WeakMap();\n    const documentFragmentMap = new WeakMap();\n    const onSubmitMap = new WeakMap();\n\n    const observerConfig$1 = { attributes: true, attributeFilter: ['disabled'] };\n    const observer = new MutationObserver((mutationsList) => {\n        for (const mutation of mutationsList) {\n            const target = mutation.target;\n            if (target.constructor['formAssociated']) {\n                const isDisabled = target.hasAttribute('disabled');\n                target.toggleAttribute('internals-disabled', isDisabled);\n                if (target.formDisabledCallback) {\n                    target.formDisabledCallback.apply(target, [target.hasAttribute('disabled')]);\n                }\n            }\n        }\n    });\n    const removeHiddenInputs = (internals) => {\n        const hiddenInputs = hiddenInputMap.get(internals);\n        hiddenInputs.forEach(hiddenInput => {\n            hiddenInput.remove();\n        });\n        hiddenInputMap.set(internals, []);\n    };\n    const createHiddenInput = (ref, internals) => {\n        const input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = ref.getAttribute('name');\n        ref.after(input);\n        hiddenInputMap.get(internals).push(input);\n        return input;\n    };\n    const initRef = (ref, internals) => {\n        hiddenInputMap.set(internals, []);\n        const isDisabled = ref.hasAttribute('disabled');\n        ref.toggleAttribute('internals-disabled', isDisabled);\n        observer.observe(ref, observerConfig$1);\n    };\n    const initLabels = (ref, labels) => {\n        if (labels.length) {\n            Array.from(labels).forEach(label => label.addEventListener('click', ref.focus.bind(ref)));\n            let firstLabelId = labels[0].id;\n            if (!labels[0].id) {\n                firstLabelId = `${labels[0].htmlFor}_Label`;\n                labels[0].id = firstLabelId;\n            }\n            ref.setAttribute('aria-labelledby', firstLabelId);\n        }\n    };\n    const setFormValidity = (form) => {\n        const nativeControlValidity = Array.from(form.elements)\n            .map((element) => element.validity.valid);\n        const polyfilledVaidity = Array.from(formElementsMap.get(form))\n            .filter(control => control.isConnected)\n            .map((control) => internalsMap.get(control).validity.valid);\n        const hasInvalid = [...nativeControlValidity, ...polyfilledVaidity].includes(false);\n        form.toggleAttribute('internals-invalid', hasInvalid);\n        form.toggleAttribute('internals-valid', !hasInvalid);\n    };\n    const formInputCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const formChangeCallback = (event) => {\n        setFormValidity(findParentForm(event.target));\n    };\n    const formSubmitCallback = (event) => {\n        const form = event.target;\n        const elements = formElementsMap.get(form);\n        if (form.noValidate) {\n            return;\n        }\n        if (elements.size) {\n            const nodes = Array.from(elements);\n            const validityList = nodes\n                .reverse()\n                .map(node => {\n                const internals = internalsMap.get(node);\n                return internals.reportValidity();\n            });\n            if (validityList.includes(false)) {\n                event.stopImmediatePropagation();\n                event.stopPropagation();\n                event.preventDefault();\n            }\n            else if (onSubmitMap.get(form)) {\n                const callback = onSubmitMap.get(form);\n                const canceled = callback.call(form, event);\n                if (canceled === false) {\n                    event.preventDefault();\n                }\n            }\n        }\n    };\n    const formResetCallback = (event) => {\n        const elements = formElementsMap.get(event.target);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                if (element.constructor.formAssociated && element.formResetCallback) {\n                    element.formResetCallback.apply(element);\n                }\n            });\n        }\n    };\n    const initForm = (ref, form, internals) => {\n        if (form) {\n            if (form.onsubmit) {\n                onSubmitMap.set(form, form.onsubmit.bind(form));\n                form.onsubmit = null;\n            }\n            const formElements = formElementsMap.get(form);\n            if (formElements) {\n                formElements.add(ref);\n            }\n            else {\n                const initSet = new Set();\n                initSet.add(ref);\n                formElementsMap.set(form, initSet);\n                form.addEventListener('submit', formSubmitCallback);\n                form.addEventListener('reset', formResetCallback);\n                form.addEventListener('input', formInputCallback);\n                form.addEventListener('change', formChangeCallback);\n            }\n            formsMap.set(form, { ref, internals });\n            if (ref.constructor['formAssociated'] && ref.formAssociatedCallback) {\n                setTimeout(() => {\n                    ref.formAssociatedCallback.apply(ref, [form]);\n                }, 0);\n            }\n            setFormValidity(form);\n        }\n    };\n    const findParentForm = (elem) => {\n        let parent = elem.parentNode;\n        if (parent && parent.tagName !== 'FORM') {\n            parent = findParentForm(parent);\n        }\n        return parent;\n    };\n    const throwIfNotFormAssociated = (ref, message, ErrorType = DOMException) => {\n        if (!ref.constructor['formAssociated']) {\n            throw new ErrorType(message);\n        }\n    };\n    const overrideFormMethod = (form, returnValue, method) => {\n        const elements = formElementsMap.get(form);\n        if (elements && elements.size) {\n            elements.forEach(element => {\n                const internals = internalsMap.get(element);\n                const valid = internals[method]();\n                if (!valid) {\n                    returnValue = false;\n                }\n            });\n        }\n        return returnValue;\n    };\n    const upgradeInternals = (ref) => {\n        if (ref.constructor['formAssociated']) {\n            const internals = internalsMap.get(ref);\n            const { labels, form } = internals;\n            initLabels(ref, labels);\n            initForm(ref, form, internals);\n        }\n    };\n\n    const aom = {\n        ariaAtomic: 'aria-atomic',\n        ariaAutoComplete: 'aria-autocomplete',\n        ariaBusy: 'aria-busy',\n        ariaChecked: 'aria-checked',\n        ariaColCount: 'aria-colcount',\n        ariaColIndex: 'aria-colindex',\n        ariaColSpan: 'aria-colspan',\n        ariaCurrent: 'aria-current',\n        ariaDisabled: 'aria-disabled',\n        ariaExpanded: 'aria-expanded',\n        ariaHasPopup: 'aria-haspopup',\n        ariaHidden: 'aria-hidden',\n        ariaKeyShortcuts: 'aria-keyshortcuts',\n        ariaLabel: 'aria-label',\n        ariaLevel: 'aria-level',\n        ariaLive: 'aria-live',\n        ariaModal: 'aria-modal',\n        ariaMultiLine: 'aria-multiline',\n        ariaMultiSelectable: 'aria-multiselectable',\n        ariaOrientation: 'aria-orientation',\n        ariaPlaceholder: 'aria-placeholder',\n        ariaPosInSet: 'aria-posinset',\n        ariaPressed: 'aria-pressed',\n        ariaReadOnly: 'aria-readonly',\n        ariaRelevant: 'aria-relevant',\n        ariaRequired: 'aria-required',\n        ariaRoleDescription: 'aria-roledescription',\n        ariaRowCount: 'aria-rowcount',\n        ariaRowIndex: 'aria-rowindex',\n        ariaRowSpan: 'aria-rowspan',\n        ariaSelected: 'aria-selected',\n        ariaSetSize: 'aria-setsize',\n        ariaSort: 'aria-sort',\n        ariaValueMax: 'aria-valuemax',\n        ariaValueMin: 'aria-valuemin',\n        ariaValueNow: 'aria-valuenow',\n        ariaValueText: 'aria-valuetext',\n        role: 'role'\n    };\n    const initAom = (ref, internals) => {\n        for (let key in aom) {\n            internals[key] = null;\n            let closureValue = null;\n            const attributeName = aom[key];\n            Object.defineProperty(internals, key, {\n                get() {\n                    return closureValue;\n                },\n                set(value) {\n                    closureValue = value;\n                    if (ref.isConnected) {\n                        ref.setAttribute(attributeName, value);\n                    }\n                    else {\n                        upgradeMap.set(ref, internals);\n                    }\n                }\n            });\n        }\n    };\n\n    class ValidityState {\n        constructor() {\n            this.badInput = false;\n            this.customError = false;\n            this.patternMismatch = false;\n            this.rangeOverflow = false;\n            this.rangeUnderflow = false;\n            this.stepMismatch = false;\n            this.tooLong = false;\n            this.tooShort = false;\n            this.typeMismatch = false;\n            this.valid = true;\n            this.valueMissing = false;\n            Object.seal(this);\n        }\n    }\n    const setValid = (validityObject) => {\n        validityObject.badInput = false;\n        validityObject.customError = false;\n        validityObject.patternMismatch = false;\n        validityObject.rangeOverflow = false;\n        validityObject.rangeUnderflow = false;\n        validityObject.stepMismatch = false;\n        validityObject.tooLong = false;\n        validityObject.tooShort = false;\n        validityObject.typeMismatch = false;\n        validityObject.valid = true;\n        validityObject.valueMissing = false;\n        return validityObject;\n    };\n    const reconcileValidity = (validityObject, newState) => {\n        validityObject.valid = isValid(newState);\n        Object.keys(newState).forEach(key => validityObject[key] = newState[key]);\n        return validityObject;\n    };\n    const isValid = (validityState) => {\n        let valid = true;\n        for (let key in validityState) {\n            if (key !== 'valid' && validityState[key] !== false) {\n                valid = false;\n            }\n        }\n        return valid;\n    };\n\n    function observerCallback(mutationList) {\n        mutationList.forEach(mutationRecord => {\n            const { addedNodes, removedNodes } = mutationRecord;\n            const added = Array.from(addedNodes);\n            const removed = Array.from(removedNodes);\n            added.forEach(node => {\n                if (internalsMap.has(node) && node.constructor['formAssociated']) {\n                    const internals = internalsMap.get(node);\n                    const { form } = internals;\n                    initForm(node, form, internals);\n                    initLabels(node, internals.labels);\n                }\n                if (upgradeMap.has(node)) {\n                    const internals = upgradeMap.get(node);\n                    const aomKeys = Object.keys(aom);\n                    aomKeys\n                        .filter(key => internals[key] !== null)\n                        .forEach(key => {\n                        node.setAttribute(aom[key], internals[key]);\n                    });\n                    upgradeMap.delete(node);\n                }\n            });\n            removed.forEach(node => {\n                const internals = internalsMap.get(node);\n                if (internals && hiddenInputMap.get(internals)) {\n                    removeHiddenInputs(internals);\n                }\n                if (shadowHostsMap.has(node)) {\n                    const observer = shadowHostsMap.get(node);\n                    observer.disconnect();\n                }\n            });\n        });\n    }\n    function fragmentObserverCallback(mutationList) {\n        mutationList.forEach(mutation => {\n            const { removedNodes } = mutation;\n            removedNodes.forEach(node => {\n                const observer = documentFragmentMap.get(mutation.target);\n                if (internalsMap.has(node)) {\n                    upgradeInternals(node);\n                }\n                observer.disconnect();\n            });\n        });\n    }\n    const deferUpgrade = (fragment) => {\n        const observer = new MutationObserver(fragmentObserverCallback);\n        observer.observe(fragment, { childList: true });\n        documentFragmentMap.set(fragment, observer);\n    };\n    new MutationObserver(observerCallback);\n    const observerConfig = {\n        childList: true,\n        subtree: true\n    };\n\n    const customStateMap = new WeakMap();\n    class CustomStateSet extends Set {\n        constructor(ref) {\n            super();\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            customStateMap.set(this, ref);\n        }\n        add(state) {\n            if (!/^--/.exec(state) || typeof state !== 'string') {\n                throw new DOMException(`Failed to execute 'add' on 'CustomStateSet': The specified value ${state} must start with '--'.`);\n            }\n            const result = super.add(state);\n            const ref = customStateMap.get(this);\n            ref.toggleAttribute(`state${state}`, true);\n            return result;\n        }\n        clear() {\n            for (let [entry] of this.entries()) {\n                this.delete(entry);\n            }\n            super.clear();\n        }\n        delete(state) {\n            const result = super.delete(state);\n            const ref = customStateMap.get(this);\n            ref.toggleAttribute(`state${state}`, false);\n            return result;\n        }\n    }\n\n    class ElementInternals {\n        constructor(ref) {\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\n                throw new TypeError('Illegal constructor');\n            }\n            const rootNode = ref.getRootNode();\n            const validity = new ValidityState();\n            this.states = new CustomStateSet(ref);\n            refMap.set(this, ref);\n            validityMap.set(this, validity);\n            internalsMap.set(ref, this);\n            initAom(ref, this);\n            initRef(ref, this);\n            Object.seal(this);\n            upgradeInternals(ref);\n            if (rootNode instanceof DocumentFragment) {\n                deferUpgrade(rootNode);\n            }\n        }\n        static get isPolyfilled() {\n            return true;\n        }\n        checkValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'checkValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            const validity = validityMap.get(this);\n            if (!validity.valid) {\n                const validityEvent = new Event('invalid', {\n                    bubbles: false,\n                    cancelable: true,\n                    composed: false\n                });\n                ref.dispatchEvent(validityEvent);\n            }\n            return validity.valid;\n        }\n        get form() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'form' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            let form;\n            if (ref.constructor['formAssociated'] === true) {\n                form = findParentForm(ref);\n            }\n            return form;\n        }\n        get labels() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'labels' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const id = ref.getAttribute('id');\n            const hostRoot = ref.getRootNode();\n            if (hostRoot && id) {\n                return hostRoot ? hostRoot.querySelectorAll(`[for='${id}']`) : []; //***\n            }\n            return [];\n        }\n        reportValidity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            const valid = this.checkValidity();\n            const anchor = validationAnchorMap.get(this);\n            if (anchor && !ref.constructor['formAssociated']) {\n                throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            }\n            if (!valid && anchor) {\n                ref.focus();\n                anchor.focus();\n            }\n            return valid;\n        }\n        setFormValue(value) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setFormValue' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            removeHiddenInputs(this);\n            if (value != null && !(value instanceof FormData)) {\n                if (ref.getAttribute('name')) {\n                    const hiddenInput = createHiddenInput(ref, this);\n                    hiddenInput.value = value;\n                }\n            }\n            else if (value != null && value instanceof FormData) {\n                value.forEach((formDataValue, formDataKey) => {\n                    if (typeof formDataValue === 'string') {\n                        const hiddenInput = createHiddenInput(ref, this);\n                        hiddenInput.name = formDataKey;\n                        hiddenInput.value = formDataValue;\n                    }\n                });\n            }\n            refValueMap.set(ref, value);\n        }\n        setValidity(validityChanges, validationMessage, anchor) {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (!validityChanges) {\n                throw new TypeError('Failed to execute \\'setValidity\\' on \\'ElementInternals\\': 1 argument required, but only 0 present.');\n            }\n            validationAnchorMap.set(this, anchor);\n            const validity = validityMap.get(this);\n            const validityChangesObj = {};\n            for (const key in validityChanges) {\n                validityChangesObj[key] = validityChanges[key];\n            }\n            if (Object.keys(validityChangesObj).length === 0) {\n                setValid(validity);\n            }\n            const check = { ...validity, ...validityChangesObj };\n            delete check.valid;\n            const { valid } = reconcileValidity(validity, check);\n            if (!valid && !validationMessage) {\n                throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The second argument should not be empty if one or more flags in the first argument are true.`);\n            }\n            validationMessageMap.set(this, valid ? '' : validationMessage);\n            ref.toggleAttribute('internals-invalid', !valid);\n            ref.toggleAttribute('internals-valid', valid);\n            ref.setAttribute('aria-invalid', `${!valid}`);\n        }\n        get shadowRoot() {\n            const ref = refMap.get(this);\n            const shadowRoot = shadowRootMap.get(ref);\n            if (shadowRoot) {\n                return shadowRootMap.get(ref);\n            }\n            return null;\n        }\n        get validationMessage() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validationMessage' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            return validationMessageMap.get(this);\n        }\n        get validity() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'validity' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            const validity = validityMap.get(this);\n            return validity;\n        }\n        get willValidate() {\n            const ref = refMap.get(this);\n            throwIfNotFormAssociated(ref, `Failed to read the 'willValidate' property from 'ElementInternals': The target element is not a form-associated custom element.`);\n            if (ref.disabled || ref.hasAttribute('disabled')) {\n                return false;\n            }\n            return true;\n        }\n    }\n    if (!window.CustomStateSet) {\n        window.CustomStateSet = CustomStateSet;\n    }\n    function isElementInternalsSupported() {\n        if (!window.ElementInternals) {\n            return false;\n        }\n        class ElementInternalsFeatureDetection extends HTMLElement {\n            constructor() {\n                super();\n                this.internals = this.attachInternals();\n            }\n        }\n        const randomName = `element-internals-feature-detection-${Math.random().toString(36).replace(/[^a-z]+/g, '')}`;\n        customElements.define(randomName, ElementInternalsFeatureDetection);\n        const featureDetectionElement = new ElementInternalsFeatureDetection();\n        return [\n            \"shadowRoot\",\n            \"form\",\n            \"states\",\n            \"willValidate\",\n            \"validity\",\n            \"validationMessage\",\n            \"labels\",\n            \"setFormValue\",\n            \"setValidity\",\n            \"checkValidity\",\n            \"reportValidity\"\n        ].every(prop => prop in featureDetectionElement.internals);\n    }\n    if (!isElementInternalsSupported()) {\n        window.ElementInternals = ElementInternals;\n        function attachShadowObserver(...args) {\n            const shadowRoot = attachShadow.apply(this, args);\n            const observer = new MutationObserver(observerCallback);\n            shadowRootMap.set(this, shadowRoot);\n            observer.observe(shadowRoot, observerConfig);\n            shadowHostsMap.set(this, observer);\n            return shadowRoot;\n        }\n        function checkValidityOverride(...args) {\n            let returnValue = checkValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'checkValidity');\n        }\n        function reportValidityOverride(...args) {\n            let returnValue = reportValidity.apply(this, args);\n            return overrideFormMethod(this, returnValue, 'reportValidity');\n        }\n        HTMLElement.prototype.attachInternals = function () {\n            if (this.tagName.indexOf('-') === -1) {\n                throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': Unable to attach ElementInternals to non-custom elements.`);\n            }\n            if (internalsMap.has(this)) {\n                throw new DOMException(`DOMException: Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);\n            }\n            return new ElementInternals(this);\n        };\n        const attachShadow = Element.prototype.attachShadow;\n        Element.prototype.attachShadow = attachShadowObserver;\n        const documentObserver = new MutationObserver(observerCallback);\n        documentObserver.observe(document.documentElement, observerConfig);\n        const checkValidity = HTMLFormElement.prototype.checkValidity;\n        HTMLFormElement.prototype.checkValidity = checkValidityOverride;\n        const reportValidity = HTMLFormElement.prototype.reportValidity;\n        HTMLFormElement.prototype.reportValidity = reportValidityOverride;\n    }\n\n}());\n"]}